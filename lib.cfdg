//╺┳╸┏━╸╺┳┓╺┳┓╻ ╻╺┳┓╺┳┓   ╻  ╻┏┓ 
// ┃ ┣╸  ┃┃ ┃┃┗┳┛ ┃┃ ┃┃   ┃  ┃┣┻┓
// ╹ ┗━╸╺┻┛╺┻┛ ╹ ╺┻┛╺┻┛   ┗━╸╹┗━┛

shape Grid(shape sp, number siz, number separation) {
    loop siz [x separation]
        loop siz [y separation]
        	sp []
}

shape Quad(shape sp, number shift) {
    sp [x -shift y  shift]
    sp [x -shift y -shift]
    sp [x shift  y -shift]
    sp [x shift  y  shift]
}

shape Maybe(shape sp)
rule { sp [] }
rule {}

shape Rotated(shape sp)
rule {
    sp []
}
rule {
    sp [r 90]
}
rule {
    sp [r -90]
}
rule {
    sp [r 180]
}

shape Shifted(shape sp, number minoff, number maxoff)
rule {
    sp [x minoff..maxoff]
}
rule {
    sp [y minoff..maxoff]
}
rule {
    sp [x -minoff..-maxoff]
}
rule {
    sp [y -minoff..-maxoff]
}

shape Flipped(shape sp)
rule {
    sp [s 1 -1]
}
rule {
    sp [s -1 1]
}
rule {
    sp [s -1 -1]
}

shape Or(shape one, shape two)
rule {
    one []
}
rule {
    two []
}

shape Tree(shape sp, number Offset, number Rot, number Scal) {
    sp []
    Tree(=) [y Offset r  Rot s Scal]
    Tree(=) [y Offset r -Rot s Scal]
}

// Percentage filter, useful for non transparent, constant shapes
// Does not give exact results, based on probability
shape Pass(number N, shape shp) {
	loop N []
		OnePercent (shp) []
}

shape OnePercent(shape shp)
rule 1% { shp [] }
rule {}

// Colors

shape Grayscale(shape shp) {
	shp [b 1..-1]
}

// Paths

path ARC(number Width) {
	MOVETO(-.5, -.5)
	ARCTO(0.5, 0.5, 1)
	STROKE(Width, CF::SquareCap) []
}

path ANGLE(number Width) {
    MOVETO(-.5, -.5)
    LINETO(-.5, .5)
    LINETO(.5, .5)
    STROKE(Width, CF::SquareCap) []
}

