//╺┳╸┏━╸╺┳┓╺┳┓╻ ╻╺┳┓╺┳┓   ╻  ╻┏┓
// ┃ ┣╸  ┃┃ ┃┃┗┳┛ ┃┃ ┃┃   ┃  ┃┣┻┓
// ╹ ┗━╸╺┻┛╺┻┛ ╹ ╺┻┛╺┻┛   ┗━╸╹┗━┛

shape Grid(shape Shp, number Size, number Separation) {
    loop Size [x Separation]
        loop Size [y Separation]
            Shp []
}

shape Quad(shape Shp, number Shift) {
    Shp [x -Shift y  Shift]
    Shp [x -Shift y -Shift]
    Shp [x Shift  y -Shift]
    Shp [x Shift  y  Shift]
}

shape Maybe(shape Shp)
rule { Shp [] }
rule {}

shape Rotated(shape Shp)
rule {
    Shp []
}
rule {
    Shp [r 90]
}
rule {
    Shp [r -90]
}
rule {
    Shp [r 180]
}

shape Shifted(shape Shp, number Minoff, number Maxoff)
rule {
    Shp [x Minoff..Maxoff]
}
rule {
    Shp [y Minoff..Maxoff]
}
rule {
    Shp [x -Minoff..-Maxoff]
}
rule {
    Shp [y -Minoff..-Maxoff]
}

shape Flipped(shape Shp)
rule {
    Shp [s 1 -1]
}
rule {
    Shp [s -1 1]
}
rule {
    Shp [s -1 -1]
}

shape Or(shape One, shape Two)
rule {
    One []
}
rule {
    Two []
}

shape Tree(shape Shp, number Offset, number Rot, number Scal) {
    Shp []
    Tree(=) [y Offset r  Rot s Scal]
    Tree(=) [y Offset r -Rot s Scal]
}

// Any basic shape
shape Basic
rule { SQUARE [] }
rule { CIRCLE [] }
rule { TRIANGLE [] }

// Ring that keeps initial rotation of a shape
shape RingKeep(shape Shp, number Rad, number Count){
    deg = 360 / Count
    loop i=Count [r deg]
        Shp [[x Rad r (i * -deg)]]
}

// Ring that rotates shapes outwards
shape RingOut(shape Shp, number Rad, number Count){
    deg = 360 / Count
    loop i=Count []
        Shp [[r (deg * i) y Rad]]
}

// Percentage filter, useful for non transparent, constant shapes
// Does not give exact results, based on probability
shape Pass(number N, shape Shp) {
    loop N []
        OnePercent (Shp) []
}

shape OnePercent(shape Shp)
rule 1% { Shp [] }
rule {}

// Colors

shape Grayscale(shape Shp) {
    Shp [b 1..-1]
}

// Paths

path LINE(number Width) {
    MOVETO( 0,  0.5 )
    LINETO( 0, -0.5 )
    STROKE(Width, CF::SquareCap) []
}

path ARC(number Width) {
    MOVETO(-0.5, -0.5)
    ARCTO(  0.5,  0.5, 1)
    STROKE(Width, CF::SquareCap) []
}

path ANGLE(number Width) {
	MOVETO(-0.5,  0.5)
	LINETO(-0.5,  0.5)
	LINETO(-0.5, -0.5)
	LINETO( 0.5, -0.5)
	STROKE(Width, CF::SquareCap) []
}
